proc = Process.whereis(:statistic_server)

Process.send(proc, :terminate, [])
:mnesia.change_table_copy_type(:statistic_server, node(), :disc_copies)
:mnesia.table_info(:statistic, :all_nodes)



Start Node

* Terminal 1:
  PORT=4000 iex --sname a@localhost --cookie abc -S mix phx.server
* Terminal 2:
  PORT=4001 iex --sname b@localhost --cookie abc -S mix phx.server

write_action = fn ->
  :mnesia.write({:statistic, 1, "foo"})
  :mnesia.write({:statistic, 2, "bar"})
end

:mnesia.transaction(write_action)

write_action = fn ->
  :mnesia.write({:statistic, 3, "gggg",})
end

:mnesia.transaction(write_action)

:ets.tab2list(:statistic)

:mnesia.system_info()

:mnesia.stop()

:mnesia.delete_schema([node()])
:mnesia.delete_table(:statistic)


alias SupervisorPhoenix.Backend.StatisticServer

StatisticServer.simulate_store_users(10)

StatisticServer.get_all_users()

create = :mnesia.add_table_copy(:statistic, node, :ram_copies)

pid = Process.whereis(:statistic_server)
Process.exit(pid, :kill)

send(pid, :terminate)

:init.stop()


benchmark:


    Benchee.run(%{"benchmark list" => fn ->
      trans = fn ->
        fun = fn _i ->
          random_num = generate_random_number()
          random_string = generate_random_string()
          id = :erlang.phash2({random_num, random_string})
          :mnesia.write({:statistic, id, random_string})
        end
        Enum.each(1..num, fun)
      end

      :mnesia.transaction(trans)
    end,

    "benchmark task" => fn ->
      max_concurrency = System.schedulers_online() * 1000
      1..num
      |> Task.async_stream(
        fn _i ->
          spawn(fn ->
            write_action = fn ->
              random_num = generate_random_number()
              random_string = generate_random_string()
              id = :erlang.phash2({random_num, random_string})

              :mnesia.write({:statistic, id, random_string})
            end
            :mnesia.transaction(write_action)
          end)
        end,
        max_concurrency: max_concurrency)
      |> Enum.to_list()
    end})